#!/usr/bin/perl
# ----------------------------------------------------------------- #
#           The HMM-Based Speech Synthesis System (HTS)             #
#           developed by HTS Working Group                          #
#           http://hts.sp.nitech.ac.jp/                             #
# ----------------------------------------------------------------- #
#                                                                   #
#  Copyright (c) 2001-2015  Nagoya Institute of Technology          #
#                           Department of Computer Science          #
#                                                                   #
#                2001-2008  Tokyo Institute of Technology           #
#                           Interdisciplinary Graduate School of    #
#                           Science and Engineering                 #
#                                                                   #
#                2008       University of Edinburgh                 #
#                           Centre for Speech Technology Research   #
#                                                                   #
# All rights reserved.                                              #
#                                                                   #
# Redistribution and use in source and binary forms, with or        #
# without modification, are permitted provided that the following   #
# conditions are met:                                               #
#                                                                   #
# - Redistributions of source code must retain the above copyright  #
#   notice, this list of conditions and the following disclaimer.   #
# - Redistributions in binary form must reproduce the above         #
#   copyright notice, this list of conditions and the following     #
#   disclaimer in the documentation and/or other materials provided #
#   with the distribution.                                          #
# - Neither the name of the HTS working group nor the names of its  #
#   contributors may be used to endorse or promote products derived #
#   from this software without specific prior written permission.   #
#                                                                   #
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND            #
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,       #
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF          #
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE          #
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS #
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,          #
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED   #
# TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,     #
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON #
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,   #
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY    #
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE           #
# POSSIBILITY OF SUCH DAMAGE.                                       #
# ----------------------------------------------------------------- #


# Settings ==============================
$fclf        = 'HTS_TTS_CHN';
$fclv        = '1.0';
$dset        = 'aispeech';
$spkr        = '@@SPKR@@';
$qnum        = '001';
$ver         = '1';
$usestraight = '1';

@SET        = ('cmp','dur');
if(!$usestraight){
    @cmp        = ('mgc','lf0');
}else{
    @cmp        = ('mgc','lf0','bap');
}
@dur        = ('dur');
$ref{'cmp'} = \@cmp;
$ref{'dur'} = \@dur;

%vflr = ('mgc' => '0.01',           # variance floors
         'lf0' => '0.01',
         'bap' => '0.01',
         'dur' => '0.01');

%thr  = ('mgc' => '000',            # minimum likelihood gain in clustering
         'lf0' => '000',
         'bap' => '000',
         'dur' => '000');

%mdlf = ('mgc' => '@@MGCMDL@@',            # tree size control param. for MDL
         'lf0' => '@@LF0MDL@@',
         'bap' => '@@BAPMDL@@',
         'dur' => '@@DURMDL@@');

%mocc = ('mgc' => '10.0',           # minimum occupancy counts
         'lf0' => '10.0',
         'bap' => '10.0',
         'dur' => ' 5.0');

%gam  = ('mgc' => '000',            # stats load threshold
         'lf0' => '000',
         'bap' => '000',
         'dur' => '000');

%t2s  = ('mgc' => 'cmp',            # feature type to mmf conversion
         'lf0' => 'cmp',
         'bap' => 'cmp',
         'dur' => 'dur');

%strb = ('mgc' => '1',     # stream start
         'lf0' => '2',
         'bap' => '5',
         'dur' => '1');

%stre = ('mgc' => '1',     # stream end
         'lf0' => '4',
         'bap' => '5',
         'dur' => '5');

%msdi = ('mgc' => '0',              # msd information
         'lf0' => '1',
         'bap' => '0',
         'dur' => '0');

%strw = ('mgc' => '1.0',            # stream weights
         'lf0' => '1.0',
         'bap' => '0.0',
         'dur' => '1.0');

%ordr = ('mgc' => '@@MGCORDER@@',     # feature order
         'lf0' => '@@LF0ORDER@@',
         'bap' => '@@BAPORDER@@',
         'dur' => '5');

%nwin = ('mgc' => '3',      # number of windows
         'lf0' => '3',
         'bap' => '3',
         'dur' => '0');

%gvthr  = ('mgc' => '000',          # minimum likelihood gain in clustering for GV
           'lf0' => '000',
           'bap' => '000');

%gvmdlf = ('mgc' => '1.0',          # tree size control for GV
           'lf0' => '1.0',
           'bap' => '1.0');

%gvgam  = ('mgc' => '000',          # stats load threshold for GV
           'lf0' => '000',
           'bap' => '000');

@slnt = ('pau','h#','brth');        # silent and pause phoneme

#%mdcp = ('dy' => 'd',              # model copy
#         'A'  => 'a',
#         'I'  => 'i',
#         'U'  => 'u',
#         'E'  => 'e',
#         'O'  => 'o');


# Speech Analysis/Synthesis Setting ==============
# speech analysis
$sr = 16000;   # sampling rate (Hz)
$fs = 80; # frame period (point)
$fw = 0.42;   # frequency warping
$gm = 0;      # pole/zero representation weight
$lg = 1;     # use log gain instead of linear gain

# speech synthesis
$pf_mcp = 1.4; # postfiltering factor for mel-cepstrum
$pf_lsp = 0.7; # postfiltering factor for LSP
$fl     = 4096;        # length of impulse response
$co     = 2047;            # order of cepstrum to approximate mel-cepstrum


# Speaker adaptation Setting ============
$spkrPat = "\"*/csnt-*-*-*-%%%%%%-*\"";       # speaker name pattern
$adpPat = "\"*/%%%%*\"";       # speaker name pattern

# regression classes
%dect = ('mgc' => '500',    # occupancy thresholds for regression classes (dec)
         'lf0' => '100',    # set thresholds in less than adpt and satt
         'bap' => '100',
         'dur' => '100');

$nClass  = 16;                            # number of regression classes (reg)

# transforms
%nblk = ('mgc' => '3',       # number of blocks for transforms
         'lf0' => '1',
         'bap' => '3',
         'dur' => '1');

%band = ('mgc' => '@@MGCORDER@@',       # band width for transforms
         'lf0' => '@@LF0ORDER@@',
         'bap' => '@@BAPORDER@@',
         'dur' => '0');

$bias{'cmp'} = 'TRUE';               # use bias term for MLLRMEAN/CMLLR
$bias{'dur'} = 'TRUE';
$tran        = ('adp' => 'feat');             # transformation kind (mean -> MLLRMEAN, cov -> MLLRCOV, or feat -> CMLLR)

# adaptation
%adpt = ('mgc' => '500',       # occupancy thresholds for adaptation
         'lf0' => '100',
         'bap' => '100',
         'dur' => '100');

$tknd{'adp'}   = 'dec';            # tree kind (dec -> decision tree or reg -> regression tree (k-means))
$dcov          = 'TRUE';             # use diagonal covariance transform for MLLRMEAN
$usemaplr      = TRUE;            # use MAPLR adaptation for MLLRMEAN/CMLLR
$usevblr       = TRUE;             # use VBLR adaptation for MLLRMEAN
$sprior        = TRUE;  # use structural prior for MAPLR/VBLR with regression class tree
$priorscale    = 1.0;            # hyper-parameter for SMAPLR adaptation
# maybe different ???
$nAdapt        = 3;              # number of iterations to reestimate adaptation xforms
$addMAP        = 1;                # apply additional MAP estimation after MLLR adaptation
$maptau{'cmp'} = 50.0;             # hyper-parameters for MAP adaptation
$maptau{'dur'} = 50.0;

# Modeling/Generation Setting ==============
# modeling
$nState      = 5;        # number of states
$nIte        = 5;         # number of iterations for embedded training
$beam        = '1500 100 5000'; # initial, inc, and upper limit of beam width
$maxdev      = 10;        # max standard dev coef to control HSMM maximum duration
$mindur      = 5;        # min state duration to be evaluated
$wf          = 5000;        # mixture weight flooring
$initdurmean = 3.0;             # initial mean of state duration
$initdurvari = 10.0;            # initial variance of state duration
$daem        = 1;          # DAEM algorithm based parameter estimation
$daem_nIte   = 10;     # number of iterations of DAEM-based embedded training
$daem_alpha  = 1.0;     # schedule of updating temperature parameter for DAEM

# generation
$pgtype     = 0;     # parameter generation algorithm (0 -> Cholesky,  1 -> MixHidden,  2 -> StateHidden)
$maxEMiter  = 20;  # max EM iteration
$EMepsilon  = 0.0001;  # convergence factor for EM iteration
$useGV      = 1;      # turn on GV
$maxGViter  = 50;  # max GV iteration
$GVepsilon  = 0.0001;  # convergence factor for GV iteration
$minEucNorm = 0.01; # minimum Euclid norm for GV iteration
$stepInit   = 1.0;   # initial step size
$stepInc    = 1.2;    # step size acceleration factor
$stepDec    = 0.5;    # step size deceleration factor
$hmmWeight  = 1.0;  # weight for HMM output prob.
$gvWeight   = 1.0;   # weight for GV output prob.
$optKind    = 'NEWTON';  # optimization method (STEEPEST, NEWTON, or LBFGS)
$nosilgv    = 1;    # GV without silent and pause phoneme
$cdgv       = 0;       # context-dependent GV
$useMSPF    = 1;    # use modulation spectrum-based postfilter
$mspfLength = 25;           # frame length of modulation spectrum-based postfilter (odd number)
$mspfFFTLen = 64;           # FFT length of modulation spectrum-based postfilter (even number)


# Directories & Commands ===============
# project directories
$prjdir = `pwd`; chomp $prjdir;

# Perl
$PERL = '/usr/bin/perl';

# wc
$WC = '/usr/bin/wc';

# HTS commands
#$HTSDIR    = "/speechlab/users/bc299/tools/HTS2.3-parallel/bin";
$HTSDIR    = "/mnt/lustre/sjtu/users/zhx66/tools/HTS2.3-parallel-QS_locked-cpu_opt-MDL/HTKTools";
#$HTSDIR    = "/mnt/lustre/sjtu/users/bc299/tools/HTS2.3-test/bin";
$HCOMPV    = "$HTSDIR/HCompV";
$HLIST     = "$HTSDIR/HList";
$HINIT     = "$HTSDIR/HInit";
$HREST     = "$HTSDIR/HRest";
$HEREST    = "$HTSDIR/HERest";
$HHED      = "$HTSDIR/HHEd";
$HSMMALIGN = "$HTSDIR/HSMMAlign";
$HMGENS    = "$HTSDIR/HMGenS";
$ENGINE    = "/asrdata/users/bz879/TTS/hts_engine_API-1.10/bin/hts_engine";

# SPTK commands
$SPTKDIR      = "/mnt/lustre/sjtu/users/bc299/tools/SPTK-3.9/build/bin";
$X2X          = "$SPTKDIR/x2x";
$FREQT        = "$SPTKDIR/freqt";
$C2ACR        = "$SPTKDIR/c2acr";
$VOPR         = "$SPTKDIR/vopr";
$VSUM         = "$SPTKDIR/vsum";
$MC2B         = "$SPTKDIR/mc2b";
$SOPR         = "$SPTKDIR/sopr";
$B2MC         = "$SPTKDIR/b2mc";
$EXCITE       = "$SPTKDIR/excite";
$LSP2LPC      = "$SPTKDIR/lsp2lpc";
$MGC2MGC      = "$SPTKDIR/mgc2mgc";
$MGLSADF      = "$SPTKDIR/mglsadf";
$MERGE        = "$SPTKDIR/merge";
$BCP          = "$SPTKDIR/bcp";
$LSPCHECK     = "$SPTKDIR/lspcheck";
$MGC2SP       = "$SPTKDIR/mgc2sp";
$BCUT         = "$SPTKDIR/bcut";
$VSTAT        = "$SPTKDIR/vstat";
$NAN          = "$SPTKDIR/nan";
$DFS          = "$SPTKDIR/dfs";
$SWAB         = "$SPTKDIR/swab";
$RAW2WAV      = "$SPTKDIR/raw2wav";
$FRAME        = "$SPTKDIR/frame";
$WINDOW       = "$SPTKDIR/window";
$SPEC         = "$SPTKDIR/spec";
$TRANSPOSE    = "$SPTKDIR/transpose";
$PHASE        = "$SPTKDIR/phase";
$IFFTR        = "$SPTKDIR/ifftr";

# MATLAB & STRAIGHT
$MATLAB   = '/rescuda/matlab/bin/matlab -nodisplay -nosplash -nojvm';
$STRAIGHT = '/mnt/lustre/asrdata/users/ml084/TTS/STRAIGHTV40pcode';


# add by bz879
$gzip  = 0; # 
$paral = 1; # 是否支持并行，在$IN_RE/$CXCL1/$CXCL2处并行计算: 0 = not; 1 = qsub; 2 = multi-thread
$REALGN= 0; # 用monophone mmf切分mono.mlf，$REALGN=迭代次数
$taskno=20; # $REALGN时分割的任务数
#$LOCK_QS="C-Lp_LANG==EN"; # 强制根结点问题集:C-Lp_LANG==EN
@mname = qw(cherry);     # qsub可以使用的机器

# add by zhx65
# SAT Trainging setting
$nSAT = 3;
$tknd{'sat'} = 'dec';
$SATMGCOCCTHRESH = 100000.0;
$SATLF0OCCTHRESH = 2000.0;
$SATBAPOCCTHRESH = 2000.0;
$SATDUROCCTHRESH = 5000.0;
%satt = ('mgc' => "$SATMGCOCCTHRESH",
         'lf0' => "$SATLF0OCCTHRESH",
         'bap' => "$SATBAPOCCTHRESH",
         'dur' => "$SATDUROCCTHRESH");

$maxmem = '40G';
$full_mem='20G';
$taskno4full=100;
$taskno4HERest=200;
$taskno4SAT=200;
$taskno4HSMM=200;
$ntrn_spkr='@@NTRN_SPKR@@';
# add ending



# Switch ================================
$MKEMV = 1; # preparing environments
$HCMPV = 1; # computing a global variance
$IN_RE = 1; # initialization & reestimation
$MMMMF = 1; # making a monophone mmf
$ERST0 = 1; # embedded reestimation (monophone)
$MN2FL = 1; # copying monophone mmf to fullcontext one
$ERST1 = 1; # embedded reestimation (fullcontext)
$CXCL1 = 1; # tree-based context clustering
$ERST2 = 1; # embedded reestimation (clustered)
$UNTIE = 1; # untying the parameter sharing structure
$ERST3 = 1; # embedded reestimation (untied)
$CXCL2 = 1; # tree-based context clustering
$ERST4 = 1; # embedded reestimation (re-clustered)
$FALGN = 1; # forced alignment for no-silent GV
$MCDGV = 1; # making global variance
$MKUNG = 1; # making unseen models (GV)
$MKUN1 = 1; # making unseen models (speaker independent)
$PGEN1 = 0; # generating speech parameter sequences (speaker independent)
$WGEN1 = 0; # synthesizing waveforms (speaker independent)
$REGTR = 1; # building regression-class trees for adaptation
$ADPT1 = 1; # speaker adaptation (speaker independent)
$PGEN2 = 0; # generating speech parameter sequences (speaker adapted)
$WGEN2 = 0; # synthesizing waveforms (speaker adapted)
$SPKAT = 1; # speaker adaptive training (SAT)
$MKUN2 = 1; # making unseen models (SAT)
$PGEN3 = 0; # generating speech parameter sequences (SAT)
$WGEN3 = 0; # synthesizing waveforms (SAT)
$ADPT2 = 1; # speaker adaptation (SAT)
$PGEN4 = 0; # generate speech parameter sequences (SAT+adaptation)
$WGEN4 = 0; # synthesizing waveforms (SAT+adaptation)
$CONVM = 1; # converting mmfs to the hts_engine file format
$ENGIN = 0; # synthesizing waveforms using hts_engine

1;
